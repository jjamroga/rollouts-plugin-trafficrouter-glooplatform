// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go
//
// Generated by this command:
//
//	mockgen -source ./client.go -destination mocks/client.go
//

// Package mock_gloo is a generated GoMock package.
package mock_gloo

import (
	context "context"
	reflect "reflect"

	gloo "github.com/argoproj-labs/rollouts-plugin-trafficrouter-glooplatform/pkg/gloo"
	v2 "github.com/solo-io/solo-apis/client-go/networking.gloo.solo.io/v2"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockNetworkV2ClientSet is a mock of NetworkV2ClientSet interface.
type MockNetworkV2ClientSet struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV2ClientSetMockRecorder
}

// MockNetworkV2ClientSetMockRecorder is the mock recorder for MockNetworkV2ClientSet.
type MockNetworkV2ClientSetMockRecorder struct {
	mock *MockNetworkV2ClientSet
}

// NewMockNetworkV2ClientSet creates a new mock instance.
func NewMockNetworkV2ClientSet(ctrl *gomock.Controller) *MockNetworkV2ClientSet {
	mock := &MockNetworkV2ClientSet{ctrl: ctrl}
	mock.recorder = &MockNetworkV2ClientSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkV2ClientSet) EXPECT() *MockNetworkV2ClientSetMockRecorder {
	return m.recorder
}

// RouteTables mocks base method.
func (m *MockNetworkV2ClientSet) RouteTables() gloo.RouteTableClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteTables")
	ret0, _ := ret[0].(gloo.RouteTableClient)
	return ret0
}

// RouteTables indicates an expected call of RouteTables.
func (mr *MockNetworkV2ClientSetMockRecorder) RouteTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteTables", reflect.TypeOf((*MockNetworkV2ClientSet)(nil).RouteTables))
}

// MockRouteTableClient is a mock of RouteTableClient interface.
type MockRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableClientMockRecorder
}

// MockRouteTableClientMockRecorder is the mock recorder for MockRouteTableClient.
type MockRouteTableClientMockRecorder struct {
	mock *MockRouteTableClient
}

// NewMockRouteTableClient creates a new mock instance.
func NewMockRouteTableClient(ctrl *gomock.Controller) *MockRouteTableClient {
	mock := &MockRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableClient) EXPECT() *MockRouteTableClientMockRecorder {
	return m.recorder
}

// GetRouteTable mocks base method.
func (m *MockRouteTableClient) GetRouteTable(ctx context.Context, name, namespace string) (*v2.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", ctx, name, namespace)
	ret0, _ := ret[0].(*v2.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable.
func (mr *MockRouteTableClientMockRecorder) GetRouteTable(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).GetRouteTable), ctx, name, namespace)
}

// ListRouteTable mocks base method.
func (m *MockRouteTableClient) ListRouteTable(ctx context.Context, opts ...client.ListOption) ([]*v2.RouteTable, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteTable", varargs...)
	ret0, _ := ret[0].([]*v2.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable.
func (mr *MockRouteTableClientMockRecorder) ListRouteTable(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).ListRouteTable), varargs...)
}

// PatchRouteTable mocks base method.
func (m *MockRouteTableClient) PatchRouteTable(ctx context.Context, obj *v2.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTable indicates an expected call of PatchRouteTable.
func (mr *MockRouteTableClientMockRecorder) PatchRouteTable(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).PatchRouteTable), varargs...)
}

// MockRouteTableReader is a mock of RouteTableReader interface.
type MockRouteTableReader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableReaderMockRecorder
}

// MockRouteTableReaderMockRecorder is the mock recorder for MockRouteTableReader.
type MockRouteTableReaderMockRecorder struct {
	mock *MockRouteTableReader
}

// NewMockRouteTableReader creates a new mock instance.
func NewMockRouteTableReader(ctrl *gomock.Controller) *MockRouteTableReader {
	mock := &MockRouteTableReader{ctrl: ctrl}
	mock.recorder = &MockRouteTableReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableReader) EXPECT() *MockRouteTableReaderMockRecorder {
	return m.recorder
}

// GetRouteTable mocks base method.
func (m *MockRouteTableReader) GetRouteTable(ctx context.Context, name, namespace string) (*v2.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", ctx, name, namespace)
	ret0, _ := ret[0].(*v2.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable.
func (mr *MockRouteTableReaderMockRecorder) GetRouteTable(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockRouteTableReader)(nil).GetRouteTable), ctx, name, namespace)
}

// ListRouteTable mocks base method.
func (m *MockRouteTableReader) ListRouteTable(ctx context.Context, opts ...client.ListOption) ([]*v2.RouteTable, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteTable", varargs...)
	ret0, _ := ret[0].([]*v2.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable.
func (mr *MockRouteTableReaderMockRecorder) ListRouteTable(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockRouteTableReader)(nil).ListRouteTable), varargs...)
}

// MockRouteTableWriter is a mock of RouteTableWriter interface.
type MockRouteTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableWriterMockRecorder
}

// MockRouteTableWriterMockRecorder is the mock recorder for MockRouteTableWriter.
type MockRouteTableWriterMockRecorder struct {
	mock *MockRouteTableWriter
}

// NewMockRouteTableWriter creates a new mock instance.
func NewMockRouteTableWriter(ctrl *gomock.Controller) *MockRouteTableWriter {
	mock := &MockRouteTableWriter{ctrl: ctrl}
	mock.recorder = &MockRouteTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableWriter) EXPECT() *MockRouteTableWriterMockRecorder {
	return m.recorder
}

// PatchRouteTable mocks base method.
func (m *MockRouteTableWriter) PatchRouteTable(ctx context.Context, obj *v2.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTable indicates an expected call of PatchRouteTable.
func (mr *MockRouteTableWriterMockRecorder) PatchRouteTable(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).PatchRouteTable), varargs...)
}
